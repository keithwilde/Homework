#if 2 variables on stack 8 bytes, have to allocate right amount
	.data 			# everything under this is variables
strInput:
	.asciiz "Enter number of disks: "
strMove:
	.asciiz "Move Disk "
	
strFrom:
	.asciiz " from peg "
	
strTo:
	.asciiz " to peg "
newline:
	.asciiz ".\n"
	.text

main:	
li $v0, 4		#prompt user for input
la $a0, strInput
syscall	
li $v0, 5		#take input and put into $v0
syscall	


move $a0, $v0
li $a1, 1
li $a2, 2
li $a3, 3

jal hanoi

j end

hanoi: # allocate memory, store ra and arguments onto onto stack. 5 arguments, 20 bytes total
subu $sp,$sp, 20
sw $ra, 4($sp)


beqz $a0,baseReturn	#check base case
sw $a0, 8($sp)
sw $a1, 12($sp)
sw $a2, 16($sp)
sw $a3, 20($sp)

subi $a0, $a0, 1	# n = n-1

move $t1, $a2
move $a2, $a3
move $a3, $t1

jal hanoi

li $v0, 4		
la $a0, strMove
syscall


lw $a0,8($sp) 
li $v0,1
syscall

li $v0, 4		
la $a0, strFrom
syscall

lw $a0,12($sp) 
li $v0,1
syscall

li $v0, 4		
la $a0, strTo
syscall

lw $a0,16($sp) 
li $v0,1
syscall



li $v0, 4		
la $a0, newline
syscall


lw $a0, 8($sp)
lw $a1, 20($sp)
lw $a2, 16($sp)
lw $a3, 12($sp)

subi $a0, $a0, 1

jal hanoi



baseReturn:
lw $ra, 4($sp)
addi $sp,$sp , 20
jr $ra

end:





